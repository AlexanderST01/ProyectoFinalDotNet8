@rendermode InteractiveAuto
@page "/ConsultaDespacho"
@inject HttpClient httpClient
@attribute [Authorize]


<div>
    <div class="row justify-content-start ">
        <div class="col-sm-10 col-md-9 col-lg-10 col-xl-xxl-7">
            <div class="card">
                <div class="card-header">
                    <h1>Consulta Despacho</h1>
                    <div class="row">
                        <label>Filtrar por</label>
                        <div class="col">
                            <InputSelect class="form-select" @bind-Value="opciones">
                                <option value="0" selected>ID</option>
                                <option value="1">Fecha</option>
                                <option value="2">Men&uacute;</option>
                                <option value="3">Centro Educativo</option>
                            </InputSelect>
                        </div>
                        <div class="col input-group">
                            <button class="form-control oi oi-magnifying-glass" type="button" @onclick="Buscar"></button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            @switch (opciones)
                            {
                                case 0:
                                    <InputNumber class="form-control" @bind-Value="DespachoAuxiliar.DespachoId"></InputNumber>
                                    break;
                                case 1:
                                    <InputDate class="form-control" @bind-Value="DespachoAuxiliar.Fecha"></InputDate>
                                    break;
                                case 2:
                                    <InputSelect class="form-select" @bind-Value="DespachoAuxiliar.MenuId">
                                        @foreach (var item in Menus)
                                        {
                                            <option value="@item.MenuId">@item.Descripcion</option>
                                        }
                                    </InputSelect>
                                    break;
                                case 3:
                                    <InputSelect class="form-select" @bind-Value="DespachoAuxiliar.CentroEducativoId">
                                        @foreach (var item in CentrosEducativos)
                                        {
                                            <option value="@item.CentroEducativoId">@item.Nombre</option>
                                        }
                                    </InputSelect>
                                    break;
                            }
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table border="1" class="table table-bordered table-striped">
                            <thead>
                                <tr class="table-secondary">
                                    <th>ID</th>
                                    <th>Fecha</th>
                                    <th>Men&uacute</th>
                                    <th>Centro Educativo</th>
                                    <th>Ver</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var despacho in Despachos)
                                {
                                    <tr>
                                        <td>@despacho.DespachoId</td>
                                        <td>@despacho.Fecha.ToString("yyyy-MM-dd")</td>
                                        <td>@ObtenerDescripcionMenu(despacho.MenuId)</td>
                                        <td>@ObtenerNombreCentroEducativo(despacho.CentroEducativoId)</td>
                                        <td><a href="RegistroDespacho/@despacho.DespachoId">ver</a></td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th>
                                        Conteo: @Conteo
                                    </th>
                                </tr>                                
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Despacho> Despachos { get; set; } = new List<Despacho>();
    public int Conteo;
    public int opciones;
    public Despacho DespachoAuxiliar = new Despacho();
    public List<CentrosEducativos> CentrosEducativos { get; set; } = new List<CentrosEducativos>();
    public List<Menu> Menus { get; set; } = new List<Menu>();

    protected override async Task OnInitializedAsync()
    {
        Menus = (await httpClient.GetFromJsonAsync<List<Menu>>("api/Menus"))!;
        CentrosEducativos = await httpClient.GetFromJsonAsync<List<CentrosEducativos>>("api/CentrosEducativos")?? new List<CentrosEducativos>();

    }

    public async Task Buscar()
    {
        try
        {
            switch (opciones)
            {
                case 0:
                    if (DespachoAuxiliar.DespachoId == 0)
                    {
                        Despachos = (await httpClient.GetFromJsonAsync<List<Despacho>>("api/Despachos"))!;
                    }
                    else
                    {
                        Despachos = (await httpClient.GetFromJsonAsync<List<Despacho>>("api/Despachos"))!
                            .Where(d => d.DespachoId == DespachoAuxiliar.DespachoId).ToList();
                    }
                    break;

                case 1:
                    if (DespachoAuxiliar.Fecha == DateTime.MinValue)
                    {
                        Despachos = (await httpClient.GetFromJsonAsync<List<Despacho>>("api/Despachos"))!;
                    }
                    else
                    {
                        Despachos = (await httpClient.GetFromJsonAsync<List<Despacho>>("api/Despachos"))!
                            .Where(d => d.Fecha.Date == DespachoAuxiliar.Fecha.Date).ToList();
                    }
                    break;

                case 2:
                    if (DespachoAuxiliar.MenuId == 0)
                    {
                        Despachos = (await httpClient.GetFromJsonAsync<List<Despacho>>("api/Despachos"))!;
                    }
                    else
                    {
                        Despachos = (await httpClient.GetFromJsonAsync<List<Despacho>>("api/Despachos"))!
                            .Where(d => d.MenuId == DespachoAuxiliar.MenuId).ToList();
                    }
                    break;

                case 3:
                    if (DespachoAuxiliar.CentroEducativoId == 0)
                    {
                        Despachos = (await httpClient.GetFromJsonAsync<List<Despacho>>("api/Despachos"))!;
                    }
                    else
                    {
                        Despachos = (await httpClient.GetFromJsonAsync<List<Despacho>>("api/Despachos"))!
                            .Where(d => d.CentroEducativoId == DespachoAuxiliar.CentroEducativoId).ToList();
                    }
                    break;
            }
        }catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }


        Conteo = Despachos != null ? Despachos.Count : 0;
    }

    public string? ObtenerDescripcionMenu(int Id)
    {
        var menu = Menus.FirstOrDefault(m => m.MenuId == Id);
        return menu?.Descripcion;
    }

    public string? ObtenerNombreCentroEducativo(int Id)
    {
        var centroEducativo = CentrosEducativos.FirstOrDefault(t => t.CentroEducativoId == Id);
        return centroEducativo?.Nombre;
    }
}