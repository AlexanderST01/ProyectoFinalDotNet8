
@inject NavigationManager NavigationManager
@page "/Comentarios"
@using ProyectoFinalDotNet8.Data
@using Radzen
@using Shared.Models
@rendermode InteractiveServer
@inject NotificationService notificationService
@inject HttpClient httpClient
@inject AuthenticationStateProvider authenticationStateProvider
@* <h3>Registro de Comentarios</h3>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="@comentario" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="ComentarioTexto" class="form-label">Comentario:</label>
                    <TextArea id="ComentarioTexto" class="form-control"  />
                    <ValidationMessage For="@(() => comentario.ComentarioTexto)" />
                </div>

                <div class="mb-3">
                    <label for="Usuario" class="form-label">Nombre de Usuario:</label>
                    <InputText id="Usuario" class="form-control" @bind-Value="comentario.Usuario" />
                    <ValidationMessage For="@(() => comentario.Usuario)" />
                </div>

                <div class="mb-3">
                    <label for="Nota" class="form-label">Nota (entre 1 y 5):</label>
                    <InputNumber id="Nota" class="form-control" @bind-Value="comentario.Nota" />
                    <ValidationMessage For="@(() => comentario.Nota)" />
                </div>
                <table>
                    <tbody>

                        @foreach (var usuario in Usuarios)
                        {
                            <tr>
                                <td>@usuario.UserName</td>
                            </tr>
                        }
                    </tbody>
                </table>

                <button type="submit" class="btn btn-primary">Enviar Comentario</button>
            </EditForm>
        </div>
    </div>
</div> *@




<EditForm Model="comentario" OnValidSubmit="Guardar">
<div class="container py-5 px-4">
    <!-- For demo purpose-->
    <header class="text-center">
        <h1 class="display-4 text-white">Comentarios</h1>
        <p class="text-white lead mb-0">Bienvenido al sistema de comentarios</p>
    </header>

    <div class="row rounded-lg overflow-hidden shadow">
        <!-- Usuarios -->
        <div class="col-5 px-0">
            <div class="bg-white">
                <div class="bg-gray px-4 py-2 bg-light">
                    <p class="h5 mb-0 py-1">Comidas</p>
                </div>

                <div class="messages-box">
                    <div class="list-group rounded-0">
                        <!-- Aquí puedes iterar sobre tus comentarios y mostrar los usuarios -->
                        
                        @foreach (var menu in menus)
                        {
                                <a class="list-group-item list-group-item-action list-group-item-light rounded-0" @onclick="(() => ElegirMenu(menu.MenuId, AuthState?.User?.Identity?.Name!))">
                                <div class="media">
                                    <img src="https://bootstrapious.com/i/snippets/sn-chat/avatar.svg" alt="user" width="100" class="rounded-circle">
                                    <div class="media-body ml-4">
                                        <div class="d-flex align-items-center justify-content-between mb-1">
                                            <h6 class="mb-0">@menu.Descripcion</h6><small class="small font-weight-bold">@menu.DiaSemana</small>
                                        </div>
                                        @* <p class="font-italic text-muted mb-0 text-small">@menu.ComentarioTexto</p> *@
                                    </div>
                                </div>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Área de chat -->
        <div class="col-7 px-0">
            <div class="px-4 py-5 chat-box bg-white">
                <!-- Puedes continuar iterando sobre tus comentarios y mostrarlos en el área de chat -->
                @foreach (var comentario in ComentariosEnviados)
                {
                    <div class="media w-50 mb-3">
                        <img src="https://bootstrapious.com/i/snippets/sn-chat/avatar.svg" alt="user" width="50" class="rounded-circle">
                        <div class="media-body ml-3">
                            <div class="bg-light rounded py-2 px-3 mb-2">
                                <p class="text-small mb-0 text-muted">@comentario.ComentarioTexto</p>
                            </div>
                            <p class="small text-muted">@comentario.Fecha.ToString("hh:mm tt | dd MMM")</p>
                        </div>
                    </div>
                }
            </div>

            <!-- Área de escritura -->
            <form action="#" class="bg-light">
                <div class="input-group">
                    <div class="input-group">
                        <input type="text" placeholder="Escribe un comentario" aria-describedby="button-addon2"@bind-value="comentario.ComentarioTexto" class="form-control rounded-0 border-0 py-4 bg-light">
                        <button type="button" class="btn btn-info btn-rounded float-end" @onclick="Guardar">Send</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
@if(AuthState is not null)
    {
        @AuthState?.User?.Identity?.Name
        ;
        
        ;
    }
</EditForm>






@code {
    public Comentarios comentario = new Comentarios();
    public List<ApplicationUser> Usuarios  { get; set; } = new();
    public List<Comentarios> ComentariosEnviados { get; set; } = new();
    public List<Menu> menus { get; set; } = new();
    public int menuActual { get; set; }
    public AuthenticationState? AuthState { get; set; }     // public List<AplicationUser> MyProperty { get; set; }
    protected override async Task OnInitializedAsync()
    {
        AuthState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var usuarios = await httpClient.GetFromJsonAsync<List<ApplicationUser>>("api/Usuers")?? new List<ApplicationUser>();
        var menus = await httpClient.GetFromJsonAsync<List<Menu>>("api/Menus")?? new List<Menu>();
        // var cometarios = await httpClient.GetFromJsonAsync<List<Comentarios>>("api/Comentarios")?? new List<Comentarios>();
        Usuarios = usuarios;    
        this.menus = menus;
        // podiras poner una lista con todos lo comentarios acerca del  menu

    }

    public async Task ElegirMenu(int menuId, string email )
    {
        var user = Usuarios.FirstOrDefault(u => u.Email == email);
        var comentarios = (await httpClient.GetFromJsonAsync<List<Comentarios>>("api/Menus/Comentarios"))!.Where(c => c.MenuId == menuId).ToList();
        ComentariosEnviados = comentarios;
        comentario.MenuId = menuId;
        comentario.Nota = 4;
        comentario.Fecha = DateTime.Now;
        comentario.Usuario = user!.Nombre;
        comentario.UsuarioId = user.Id;
        menuActual = menuId;
    }
    public async Task Guardar()
    {
        var agregarComentario = menus.FirstOrDefault(m => m.MenuId == menuActual);
        agregarComentario!.ComenentarioDetalle.Add(comentario);
        using var response = await httpClient.PostAsJsonAsync("api/Menus", agregarComentario);
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error ",
                    Detail = "Comida no guardada",
                    Duration = 5_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var menuDevuelto = await response.Content.ReadFromJsonAsync<Menu>();
        if (menuDevuelto is not null)
        {
         
            Nuevo();
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado ",
                    Detail = "Comida guardada",
                    Duration = 5_000
                };
            notificationService.Notify(mensaje);
            ComentariosEnviados = (await httpClient.GetFromJsonAsync<List<Comentarios>>("api/Menus/Comentarios"))!.Where(c => c.MenuId == menuActual).ToList();
            StateHasChanged();


        }
    }
    public void Nuevo()
    {
        comentario = new Comentarios();
    }
    private async Task HandleValidSubmit()
    {
        await Task.Run(() => Console.WriteLine("OnValidSubmit"));
    }

}