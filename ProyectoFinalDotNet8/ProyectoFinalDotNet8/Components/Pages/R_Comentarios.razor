
@inject NavigationManager NavigationManager
@page "/Comentarios"
@page "/Comentarios/{menuId:int}"

@using ProyectoFinalDotNet8.Data
@using Radzen
@using Shared.Models
@rendermode InteractiveServer
@inject NotificationService notificationService
@inject HttpClient httpClient
@inject AuthenticationStateProvider authenticationStateProvider
<EditForm Model="comentario" OnValidSubmit="Guardar">
<div class="container py-5 px-4">
    <!-- For demo purpose-->
    @* <header class="text-center"> *@
        <div class="modal-dialog-scrollable">
            <div class="card">
                <a href="ConsultaMenu" class="btn btn-dark btn-rounded test" data-mdb-ripple-init role="button" aria-pressed="true"><i class="bi bi-arrow-left-circle"></i></a>

                <div class="container mt-5">
                    <div class="row">
                        <div class="col-md-6">
                            @if (Menu.Imagen != null)
                            {
                                var base64 = Convert.ToBase64String(Menu.Imagen);
                                var imgSrc = $"data:image/jpeg;base64,{base64}";
                                <img src="@imgSrc" alt="Imagen del producto" class="rounded mx-auto d-block img-fluid" style="max-width: 300px; max-height: 300px; margin: 5px;" />
                            }
                        </div>
                        <div class="col-md-6">
                            <h2>@Menu.Descripcion</h2>
                            <strong>Descripc&iacute;on:</strong>
                            @foreach (var comida in Menu.MenuDetalles)
                            {
                                <p class="text-muted">@Menu.Descripcion</p>
                            }
                            <p><strong>D&iacute;a de la semana:</strong> @Menu.DiaSemana</p>
                            <strong> Nota promedio: </strong>
                            @if (Menu.ComenentarioDetalle.Any())
                            {
                                @if (Menu.ComenentarioDetalle.Count > 0)
                                {
                                    @for (int i = 0; i < 5; i++)
                                    {
                                        if (i < Menu.ComenentarioDetalle.Average(c => c.Nota))
                                        {
                                            <i class="bi bi-star-fill text-warning"></i>

                                        }
                                        else
                                        {
                                            <i class="bi bi-star text-warning"></i>
                                        }

                                    }
                                }
                            }
                        </div>
                    </div>
                    <div class="row mt-5">
                    </div>
                </div>
            </div>
            
            <!-- Área de chat -->
            <div class="card">
                <div class="col px-0">
                    @if (AuthState?.User?.Identity?.Name != null)
                    {

                    <div class="px-5 py-5 chat-box bg-white">
                        <!-- Puedes continuar iterando sobre tus comentarios y mostrarlos en el área de chat -->
                        @foreach (var comentario in ComentariosEnviados)
                        {

                            @if (AuthState?.User?.Identity?.Name == comentario.Usuario)
                            {

                                <div class="row justify-content-end">

                                    <div class="container text-end d-flex flex-column align-items-end">

                                        <div>
                                            <!-- Imagen -->
                                            <img src="https://bootstrapious.com/i/snippets/sn-chat/avatar.svg" alt="user" width="50" height="50" class="rounded-circle">

                                        </div>
                                        <div>

                                            @for (int i = 0; i < 5; i++)
                                            {
                                                if (i < comentario.Nota)
                                                {
                                                    <i class="bi bi-star-fill text-warning"></i>

                                                }
                                                else
                                                {
                                                    <i class="bi bi-star text-warning"></i>
                                                }

                                            }

                                        </div>

                                        <strong>@comentario.Usuario</strong>

                                        <!-- Nombre de usuario -->

                                        <div class="media-body col-auto">
                                            <!-- Contenedor comenatrio -->
                                            <div class="bg-info rounded-2 w-100">

                                                <p class="text-muted m-0 text-break align-items-start">
                                                    @comentario.ComentarioTexto
                                                </p>

                                            </div>

                                            <p class="small text-muted text-right">
                                                @comentario.Fecha.ToString("hh:mm tt | dd MMM")
                                            </p>
                                        </div>

                                    </div>

                                </div>
                            }
                            else
                            {

                                <div class="row justify-content-start">

                                    <div class="container text-start d-flex flex-column align-items-start">

                                        <div>
                                            <!-- Imagen -->
                                            <img src="https://bootstrapious.com/i/snippets/sn-chat/avatar.svg" alt="user" width="50" height="50" class="rounded-circle">

                                        </div>
                                        <div>

                                            @for (int i = 0; i < 5; i++)
                                            {
                                                if (i < comentario.Nota)
                                                {
                                                    <i class="bi bi-star-fill text-warning"></i>

                                                }
                                                else
                                                {
                                                    <i class="bi bi-star text-warning"></i>
                                                }

                                            }

                                        </div>
                                        <strong>@comentario.Usuario</strong>

                                        <div class="media-body col-auto">
                                            <!-- Contenedor comenatrio -->
                                            <div class="bg-light rounded-2 w-100">

                                                <p class="text-muted m-0 text-break">
                                                    @comentario.ComentarioTexto
                                                </p>

                                            </div>

                                            <p class="small text-muted text-right">
                                                @comentario.Fecha.ToString("hh:mm tt | dd MMM")
                                            </p>
                                        </div>

                                    </div>

                                </div>
                            }
                        }
                    </div>
                    }

                    <div class="input-group">
                        <div class="mb-3 ">
                            <label class="form-label">Calificación</label>
                            <select class="form-select" @bind="comentario.Nota">
                                <option value="1" selected>&#9733;</option>
                                <option value="2">&#9733; &#9733;</option>
                                <option value="3">&#9733; &#9733; &#9733;</option>
                                <option value="4">&#9733; &#9733; &#9733; &#9733;</option>
                                <option value="5">&#9733; &#9733; &#9733; &#9733; &#9733;</option>
                            </select>
                        </div>
                        <div class="input-group">
                            <input type="text" placeholder="Escribe un comentario" aria-describedby="button-addon2" @bind-value="comentario.ComentarioTexto" class="form-control rounded-0 border-0 py-4 bg-light">
                            <button type="submit" class="btn btn-info btn-rounded float-end"><i class="bi bi-send-fill"></i></button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
            
</div>
</EditForm>


@code {
    [Parameter]
    public int menuId { get; set; }
    public Comentarios comentario = new Comentarios();
    public List<ApplicationUser> Usuarios  { get; set; } = new();
    public List<Comentarios> ComentariosEnviados { get; set; } = new();
    public List<Menu> menus { get; set; } = new();
    public Menu Menu { get; set; } = new();
    public int menuActual { get; set; }
    public string? emailActual { get; set; }
    public AuthenticationState? AuthState { get; set; }     // public List<AplicationUser> MyProperty { get; set; }
    protected override async Task OnInitializedAsync()
    {
        AuthState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var usuarios = await httpClient.GetFromJsonAsync<List<ApplicationUser>>("api/Usuers")?? new List<ApplicationUser>();
        var menus = await httpClient.GetFromJsonAsync<List<Menu>>("api/Menus")?? new List<Menu>();
        // var cometarios = await httpClient.GetFromJsonAsync<List<Comentarios>>("api/Comentarios")?? new List<Comentarios>();
        Usuarios = usuarios;    
        this.menus = menus;
        if(menuId > 0)
        {
            await ElegirMenu(menuId, AuthState?.User?.Identity?.Name ?? string.Empty);
        }
        // podiras poner una lista con todos lo comentarios acerca del  menu
    }

    public async Task ElegirMenu(int menuId, string email )
    {
        var user = Usuarios.FirstOrDefault(u => u.Email == email);
        var comentarios = (await httpClient.GetFromJsonAsync<List<Comentarios>>("api/Menus/Comentarios"))!.Where(c => c.MenuId == menuId).ToList();
        var menu = (await httpClient.GetFromJsonAsync<List<Menu>>("api/Menus"))!.FirstOrDefault(m => m.MenuId == menuId);
        emailActual = email;
        Menu = menu!;
        ComentariosEnviados = comentarios;
        comentario.MenuId = menuId;
        comentario.Fecha = DateTime.Now;
        comentario.Usuario = user?.UserName ?? string.Empty;
        comentario.UsuarioId = user?.Id ?? string.Empty;
        menuActual = menuId;
    }

    public async Task Guardar()
    {
        var user = Usuarios.FirstOrDefault(u => u.Email == emailActual);        
        var comentarios = (await httpClient.GetFromJsonAsync<List<Comentarios>>("api/Menus/Comentarios"))!.Where(c => c.MenuId == menuId).ToList();
        var menu = (await httpClient.GetFromJsonAsync<List<Menu>>("api/Menus"))!.FirstOrDefault(m => m.MenuId == menuId);
        Menu = menu!;
        ComentariosEnviados = comentarios;
        comentario.MenuId = menuId;
        comentario.Fecha = DateTime.Now;
        comentario.Usuario = user!.UserName;
        comentario.UsuarioId = user.Id;
        menuActual = menuId;


        var agregarComentario = menus.FirstOrDefault(m => m.MenuId == menuActual);
        agregarComentario!.ComenentarioDetalle.Add(comentario);
    // using var response = await httpClient.PutAsJsonAsync($"api/Menus/{menuActual}", agregarComentario);
        // using var response = await httpClient.PostAsJsonAsync("api/Menus", agregarComentario);
        using var response = await httpClient.PostAsJsonAsync("api/Menus/Comentarios", comentario);
        // using var response = await httpClient.PutAsJsonAsync("api/Menus", menuActual, agregarComentario);
        // using var response = await httpClient.PutAsJsonAsync($"api/Menus/{menuActual}", agregarComentario);
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error ",
                    Detail = "Comida no guardada",
                    Duration = 5_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var menuDevuelto = await response.Content.ReadFromJsonAsync<Menu>();
        if (menuDevuelto is not null)
        {
         
            Nuevo();
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado ",
                    Detail = "Comida guardada",
                    Duration = 5_000
                };
            notificationService.Notify(mensaje);
            ComentariosEnviados = (await httpClient.GetFromJsonAsync<List<Comentarios>>("api/Menus/Comentarios"))!.Where(c => c.MenuId == menuActual).ToList();
            StateHasChanged();
        }
        StateHasChanged();

    }
    public void Nuevo()
    {
        comentario = new Comentarios();
    }
    private async Task HandleValidSubmit()
    {
        await Task.Run(() => Console.WriteLine("OnValidSubmit"));
    }
    
}